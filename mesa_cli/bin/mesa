#! /usr/bin/env ruby
require "thor"
require "fileutils"
begin
  require "mesa_script"
  $use_mesascript = true
rescue LoadError
  $use_mesascript = false
end

ALL_POSSIBLE_SCRIPTS = {"bash" => [".bash_profile", ".bashrc"]}

class MyCLI < Thor
  option :simple, :type => :boolean, :aliases => :s,
  :desc => "Just copy work directory and rename it. Nothing done with " +
           "MesaScript."
  option :pgstar, :type => :boolean, :aliases => [:p, :pgstar], 
  :desc => "Point `inlist` to main inlist for pgstar in addition to star_job " +
           "and controls (default points to `inlist_pgstar`)."

  desc "new [NEW_DIR]", "Create MESA work dir called NEW_DIR (default 'work')."
  long_desc <<-LONGDESC

    `mesa new` will create a new work directory generated from your current
    $MESA_DIR/star/work. The argument specifies the name of the new directory,
    and the base name of the directory will be used to rename `inlist_project`
    to `inlist_BASENAME_OF_ARGUMENT`. Finally, it uses MesaScript to point the
    base `inlist` to the new one and converts the new inlist to MesaScript for
    easy automation. This is only done if MesaScript is available.

  LONGDESC
  def new(new_dir="work")
    return unless check_for_mesa_dir
    work_dir = File.join(ENV['MESA_DIR'], 'star', 'work')
    new_loc = new_dir
    basename = File.basename(new_loc)
    FileUtils.cp_r(work_dir, new_loc, :verbose => true)
    unless options[:simple]
      old_inlist_name = File.join(new_loc, "inlist_project")
      short_name = "inlist_#{basename}"
      new_inlist_name = File.join(new_loc, short_name)
      File.rename(old_inlist_name, new_inlist_name)
      if options[:pgstar]
        create_control_inlist(new_loc, short_name, short_name, short_name)
      else
        create_control_inlist(new_loc, short_name, short_name)
      end
      create_ms_file(new_inlist_name, File.join(new_loc, basename + '.rb'))
    end
  end
  
  desc "point INLIST", "Point main `inlist` to INLIST."
  option :pgstar, :type => :boolean, :aliases => [:p, :pgstar], 
  :desc => "Point `inlist` to INLIST for pgstar in addition to star_job " +
           "and controls (default points to `inlist_pgstar`)."
  def point(inlist)
    if options[:pgstar]
      create_control_inlist(Dir.pwd, inlist, inlist, inlist)
    else
      create_control_inlist(Dir.pwd, inlist, inlist)
    end
  end
  
  desc "test [TEST_SUITE_CASE] [NEW_DIR]", "Copy test suite case work " +
       "directory with name TEST_SUITE_CASE to location NEW_DIR."
  long_desc <<-LONGDESC
    `mesa test` will primarily create a new work directory based on an existing
    test case located in $MESA_DIR/star/test_suite. Since the structure of
    these directories varies wildly, no MesaScript or renaming niceties are 
    done as in the standard `mesa new` command. The first argument is the name
    of the test suite case to be copied. The second argument, if provided, will
    be the name of the new directory. If this is omitted, the name remains the
    same. If no arguments are given a list of available test suite cases are
    printed out and no directories are copied.

    The resulting directory will have all references to custom values of 
    MESA_DIR removed and any local paths (like ../../inlist_massive_defaults)
    will be converted to fully-qualified paths (like 
    $MESA_DIR/star/inlist_massive_defaults). The resulting work directory should
    be ready to make and run immediately as if it were in the test suite
    directory.
  LONGDESC
  option :list, :type => :boolean, :aliases => :l, 
  :desc => "lists available test suite cases"
  
  def test(test_case=nil, new_dir=nil)
    return unless check_for_mesa_dir 

    test_suite_dir = File.join(ENV['MESA_DIR'], 'star', 'test_suite')
    if options[:list] or test_case.nil?
      puts "test cases in #{test_suite_dir}:"
      puts Dir.entries(test_suite_dir).select { |entry| entry[0] != '.' }
      return
    end
    
    work_dir = File.join(test_suite_dir, test_case)
    unless File.directory?(work_dir)
      puts "Unable to locate test suite case #{test_case} in directory " +
      test_suite_dir + ". Exiting."
      return
    end
    new_dir ||= File.join(FileUtils::pwd, test_case)
    FileUtils.cp_r(work_dir, new_dir, :verbose => true)
    inlist_files = Dir.glob(File.join(new_dir,"inlist*"))
    inlist_files.each do |inlist_file|

      # remove references to a new MESA_DIR
      inlist_lines = IO.readlines(inlist_file).reject do |line|
        line.downcase =~ /mesa_dir/
      end

      # remove references to inlist_test_suite
      bad_numbers = []
      bad_namelists = []
      inlist_lines.each do |line|
        if line =~ /inlist_test_suite/
          line =~ /extra_(.+)_inlist(\d)/
          bad_namelists << $1
          bad_numbers << $2
        end
      end
      bad_combos = bad_namelists.zip(bad_numbers)
      bad_words = []
      bad_combos.each do |namelist, number|
        bad_words << "read_extra_#{namelist}_inlist#{number}"
        bad_words << "extra_#{namelist}_inlist#{number}_name"
      end
      inlist_lines.reject! do |line|
        any_found = false
        bad_words.each do |bad_word|
          if line.include?(bad_word)
            any_found = true
            break
          end
        end
        any_found
      end

      # make local paths fully-qualified
      new_inlist_lines = inlist_lines.map do |line|
        if line =~ /((\.\.\/)+)/
          line.sub(/((\.\.\/)+)/, File.expand_path(File.join(work_dir, $1))+'/')
        else
          line
        end
      end

      # write out cleaned up inlist
      IO.write(inlist_file, new_inlist_lines.join)
    end

    # Clean up makefule
    makefile = File.join(new_dir, 'make', 'makefile')
    make_lines = IO.readlines(makefile)

    # Make sure MESA_DIR is not set in makefile
    make_lines.reject! { |line| line =~ /\A\s*MESA_DIR/ }

    # Make sure no local references to files in mesa tree are made
    make_lines.reject! { |line| line =~ /\.\./ }
    make_lines.reject! { |line| line.empty? }
    IO.write(makefile, make_lines.join)
  end

  desc "default FILE_NAME", "Open defaults file for namelist FILE_NAME."
  def default(filename)
    return unless check_for_mesa_dir
    defaults_dir = File.join(ENV['MESA_DIR'], 'star', 'defaults')
    suffix = case
    when %w{star_job controls pgstar}.include?(filename) then '.defaults'
    when %w{profile_columns history_columns}.include?(filename) then '.list'
    else
      puts <<-BAD_NAME
      Invalid file name: #{filename}. Must use 'star_job', 'controls', 'pgstar',
      'profile_columns', or 'history_columns'.
      BAD_NAME
      return
    end
    editor = ENV['EDITOR'] || 'less'
    system("#{editor} #{File.join(defaults_dir, filename)}#{suffix}")
  end

  desc "install VER_NUMBER [DIR_NAME]", "Installs mesa version VER_NUMBER."
  long_desc <<-LONGDESC
  Installs a user-specified version of MESA (latest version number is typically
  found at http://mesa.sourceforge.net/prereqs.html). The login scripts will
  also be updated to have the MESA_DIR environment variable point to the new
  installation location. Currently only the Bourne again shell (bash) is
  supported, though the actual installation (without login script adjustments)
  can still be accomplished in other shells.
  LONGDESC
  method_option :shell, :type => "string", :aliases => "-s", :default => "bash",
    :required => "true", :desc => "The shell to be used when editing login "+
    "scripts. Default is 'bash'. Currently no other options."
  method_option :basic, :type => "boolean", :aliases => "-b", :desc => "Force "+
    "a basic installation, which skips any manipulation of login scripts."

  def install(ver_number, custom_name=nil)

    # download proper version of MESA via SVN
    puts "Downloading MESA version #{ver_number}. This will take awhile."
    puts ''
    dir_name = custom_name || File.join(ENV['HOME'], "mesa-r#{ver_number}")
    system("svn co -r #{ver_number} " +
      "svn://svn.code.sf.net/p/mesa/code/trunk #{dir_name}")
    puts "Downloaded MESA version #{ver_number}."
    puts ''

    # install MESA
    unless have_mesasdk?
      puts "Installation failed: MESA SDK not set up properly."
      puts ''
      return
    end
    puts "Now installing. This will take awhile."
    puts ''
    start_dir = FileUtils::pwd
    FileUtils::cd(File.join(dir_name))
    system("./clean")
    system("./install")
    FileUtils::cd(start_dir)

    # detect login scripts
    shell = options[:shell]
    possible_scripts = ALL_POSSIBLE_SCRIPTS[shell] || []

    # stop if basic installation or if we don't know how to handle the shell

    if options[:basic] or possible_scripts.empty?
      if possible_scripts.empty? and not options[:basic]
        puts "Don't know how to adjust login scripts for shell #{shell}. Exiting."
        puts ''
      end
      puts "Installed MESA version #{ver_number} in #{dir_name}. Your login " +
      "scripts likely still need to be updated. See \"Set your environment " +
      "variables\" in http://mesa.sourceforge.net/prereqs.html for details." 
      puts ''   
      return
    end

    # detect login scripts    
    possible_scripts.map! { |script| File.join(ENV['HOME'], script) }
    login_scripts = []
    possible_scripts.each do |script|
      login_scripts << script if File.exist?(script)
    end

    # update login scripts to set MESA_DIR properly
    have_fixed = login_scripts.empty?
    login_scripts.each do |script| 
      fixed_this_one = adjust_script(script, dir_name, shell)
      have_fixed = fixed_this_one unless have_fixed
    end

    # add MESA_DIR assignment if none are present, favoring .bash_profile
    unless (have_fixed or login_scripts.empty?)
      script = login_scripts[0]
    end
  end

  private
  def create_ms_file(inlist_name, ms_name)
    ms_name += '.rb' unless ms_name[-3..-1] == '.rb'
    source = File.join(inlist_name)
    output = File.join(ms_name)
    Inlist.inlist_to_mesascript(source, output) if $use_mesascript
  end
  
  def check_for_mesa_dir
    return true if ENV['MESA_DIR']

    puts "WARNING: No environment variable MESA_DIR found. Exiting."
    return false
  end

  def have_mesasdk?
    return true if ENV['MESASDK_ROOT']

    puts "No environment variable MESASDK_ROOT found. Be sure to download and "+
    "install the latest MESA SDK for your system from "+
    "http://www.astro.wisc.edu/~townsend/static.php?ref=mesasdk, being sure to"+
    "set the MESASDK_ROOT environment variable and sourcing the SDK " +
    "initialization script."
    return false
  end

  def create_control_inlist(dir, star_job, controls, pgstar = "inlist_pgstar")
    Inlist.make_inlist(File.join(dir, 'inlist')) do
          read_extra_star_job_inlist1 true
          extra_star_job_inlist1_name star_job

          read_extra_controls_inlist1 true
          extra_controls_inlist1_name controls

          read_extra_pgstar_inlist1 true
          extra_pgstar_inlist1_name pgstar
    end
  end

  def adjust_script(script, dir_name, shell="bash")
    have_fixed = false
    case shell
    when "bash"
      # read in script to array of strings
      contents = IO.readlines(script)

      # identify lines with MESA_DIR assignment
      lines_to_fix = []
      contents.each_with_index do |line, i|
        if line =~ /export MESA_DIR=.*/
          lines_to_fix << i
        end
      end

      # adjust MESA_DIR location and document changes
      lines_to_fix.reverse.each do |i|
        have_fixed = true
        line = contents[i]
        contents[i].sub!(/=.*/, "=#{dir_name}")
        contents.insert(i-1, '# ' + "Changed MESA_DIR to #{dir_name} on " + 
          "#{Time.now.ctime} from mesa install script.")
      end

      # write out adjusted contents to file
      if have_fixed
        IO.write(script, contents.join)
        puts "Adjusted MESA_DIR variable in #{script}."
      end

    else
      raise "Cannot adjust #{script} because shell \"#{shell}\" is unsupported."
    end
    return have_fixed
  end

  def add_assignment_to_script(script, dir_name, shell="bash")
    contents = IO.readlines(script)
    contents << "\n"
    contents << '# Added by mesa install tool on ' + Time.now.to_s + ".\n"
    contents << assignment_line('MESA_DIR', dir_name, shell)
    IO.write(script, contents.join)
    puts "Added MESA_DIR environment variable to #{script}."
  end

  def assignment_line(var_name, value, shell)
    case shell
    when bash
      "export #{var_name}=#{value}\n"
    else
      raise "Cannot make assignments for shell #{shell} because #{shell} is " +
      "not a supported shell."
    end
  end
end

MyCLI.start(ARGV)