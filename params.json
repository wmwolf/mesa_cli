{"name":"Mesa cli","tagline":"Command line tools for use with open source MESA stellar evolution code.","body":"mesa_cli\r\n========\r\n\r\nCommand line tools for use with open source MESA stellar evolution code.\r\n\r\nI don't think this tool is done yet, but I wanted to get it out there. So far\r\nrequires ruby, MesaScript, thor, and a working mesa directory accessed by\r\n`$MESA_DIR`.\r\n\r\n## Installation ##\r\n\r\n### Rubygems Installation\r\n\r\nEnter\r\n\r\n    gem install mesa_cli\r\n\r\nor if that doesn't work, enter\r\n\r\n    sudo gem install mesa_cli\r\n\r\ninto your terminal. You should be done now!\r\n\r\n### Manual Installation\r\n\r\nIf, for some reason, the rubygems installation doesn't work, you may clone this\r\nrepository and install the single file `mesa` (located in `mesa_cli/bin/mesa`)\r\nas detailed below.\r\n\r\n1. Make sure you have Ruby 1.8.7 or higher (1.9.3 recommended)\r\n2. Install [mesascript](http://wmwolf.github.io/MesaScript/).\r\n3. Install the Thor gem via\r\n\r\n    sudo gem install thor\r\n\r\n4. Place `mesa` file in your path\r\n\r\n\r\n## Usage\r\n\r\nTo get quick information, type `mesa help` to list the commands and see what\r\nthey do. For detailed information on a particular command, type `mesa help\r\ncommand` to learn about an individual command (replacing the word \"command\" \r\nwith the actual subcommand name). Brief summaries of commands are below.\r\n\r\n### default\r\n\r\nTo use, just type\r\n\r\n    mesa default NAMELIST_NAME\r\n\r\nwhere namelist name is the name of a MESA star namelist, like `star_job`,\r\n`controls`, or `pgstar`.\r\n\r\nThis command will open the proper defaults file for the corresponding namelist\r\nusing whatever editor your system has set in the `EDITOR` variable. For\r\ninstance,\r\n\r\n    mesa default star_job\r\n\r\nwill open `$MESA_DIR/star/defaults/star_job.defaults` in vim or whatever default editor you've set up.\r\n\r\n### install\r\n\r\nTo use, just type\r\n\r\n    mesa install VERSION_NUMBER [DIR_NAME] --shell=MYSHELL\r\n\r\nThis will do a fresh checkout of mesa (version number given by VERSION_NUMBER) \r\ninto a directory (named DIR_NAME, default is mesa-rXXXX, where XXXX is the \r\nversion number). After the checkout, mesa will install, and your login scripts \r\nwill be updated to point MESA_DIR to this new installation directory.\r\n\r\nBy default, the shell is assumed to be bash, so `~/.bash_profile` and \r\n`~/.bashrc` will be checked for instances of `MESA_DIR=` in these files, which\r\nare then updated to point to the new installation path. If no such assignments \r\nare found, one will be added to `~/.bash_profile` (if that file does not \r\nexist, it will be added to `~/.bashrc`, if it exists). There is a `--shell=` \r\noption, but it is currently useless since there is only one shell option.\r\n\r\nCurrently there is no support for the C shell, but this will be an feature in a future version. For a basic installation with no mucking around of shell scripts, add the `--basic` or `-b` flag.\r\n\r\nSome examples:\r\n\r\n    mesa install 9999\r\n\r\nwill download and install mesa revision 9999 into a directory named\r\n`mesa-r9999` in the current directory. It will then try to find the files\r\n`~/.bash_profile` and `~/.bashrc`. If it finds them, it will first try to\r\nupdate any lines conatining `MESA_DIR=` to point them to the new,\r\nfully-qualified path to `mesa-r9999`. If no such lines are added, it will add\r\nthe appropriate line (`export MESA_DIR=/PATH/TO/mesa-r9999`) at the end of one\r\nof those scripts, preferring `~/.bash_profile`.\r\n\r\n    mesa install $HOME/mesa_installations/my_latest_mesa 9999\r\n\r\nwill download and install mesa revision 9999 into the directory\r\n`$HOME/mesa_installations/my_latest_mesa`. Then it will set `MESA_DIR` in \r\nlogin scripts as in the previous example.\r\n\r\n    mesa install 9999 -b\r\n\r\nwill download and install mesa revision 9999 into a directory named\r\n`mesa-r9999` in the current directory. It will not attempt to change login\r\nscripts.\r\n\r\n    mesa install $HOME/mesa_installations/my_latest_mesa 9999 -b\r\n\r\nwill download and install mesa revision 9999 into the directory\r\n`$HOME/mesa_installations/my_latest_mesa`. It will not attempt to change login\r\nscripts.\r\n\r\n### new\r\n\r\nTo use, just type \r\n\r\n    mesa new DIR_NAME\r\n\r\nwhere `DIR_NAME` is the name of a new MESA work directory.\r\n\r\nThis makes a copy of `$MESA_DIR/star/work` into a directory with the name\r\nchosen. With no name (i.e. just typing `mesa new`), the directory will just be\r\ncalled work. The `inlist_project` will be renamed to `inlist_DIR_NAME`. If\r\nMesaScript is available, the main `inlist` file will be pointed to the newly-\r\nrenamed `inlist_project`, and a MesaScript version of the new `inlist_project`\r\nwill be made that compiles to `inlist_project`.\r\n\r\nThe `-s` or `--simple` option will just copy the work directory and rename the\r\ndirectory only. No renaming of inlists or creation of MesaScript files will be\r\ndone.\r\n\r\nThe `-p` or `--pgstar` option will also point the main `inlist` file to the\r\nnewly-named `inlist_project` file for the `pgstar` namelist instead of the\r\ndefault `inlist_pgstar`.\r\n\r\n### point\r\n\r\nTo use, just type\r\n\r\n    mesa point INLIST_TO_POINT_TO\r\n\r\nwhere `INLIST_TO_POINT_TO` is the name of an inlist that you would like your local `inlist` file to point to. Currently this can only allow you to point to one inlist. By default, this will not point to the new inlist for the `pgstar` namelist, but it will for both of the `star_job` and `controls` namelists.\r\n\r\nThe `-p` or `--pgstar` option will also point the main `inlist` file to the\r\n`INLIST_TO_POINT_TO` file for the `pgstar` namelist.\r\n\r\n### test\r\n\r\nTo use, just type\r\n\r\n    mesa test TEST_CASE DIR_NAME\r\n\r\nwhere `TEST_CASE` is the name of a test case in `$MESA_DIR/star/test_suite` and `DIR_NAME` is the name of a directory to be created that will contain a copy of the proper test suite case.\r\n\r\nThe second argument is optional, and if omitted, the new directory will have \r\nthe same name as the original test suite case. If neither argument is given, a\r\nlist of every file in `$MESA_DIR/star/test_suite` is output. The listing\r\nbehavior can also be forced by adding the `-l` or `--list` option to the call.\r\n\r\nWork directories made in this way are \"de-test-suited\" in that calls back to\r\n`inlist_test_suite` are deleted along with any other attempts to change the value of `mesa_dir`. All local path definitions (ones using `../../` or the\r\nlike) will be made fully qualified. For example, `../../../` will be turned\r\ninto `$MESA_DIR/`. Thus, references to other inlists, like \r\n`inlist_massive_defaults` or models, like those found in\r\n`$MESA_DIR/data/star_data`, should remain intact. IF THESE EXTERNAL REFERENCES\r\nCONTAIN LOCAL PATHS, THINGS WILL BREAK. The only inlist that is strictly barred\r\nfrom this process is `inlist_test_suite` which currently only serves to set\r\nthe `mesa_dir` via a local path, so references to this inlist are always \r\ndeleted.\r\n\r\n### version\r\n\r\nTo use, just type\r\n\r\n    mesa version\r\n\r\nThis will just print out the version number of mesa that is currently installed in your MESA_DIR.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}